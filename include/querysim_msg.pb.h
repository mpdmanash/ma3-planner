// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: querysim_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_querysim_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_querysim_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_querysim_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_querysim_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_querysim_5fmsg_2eproto;
namespace MA3 {
class QuerySim;
class QuerySimDefaultTypeInternal;
extern QuerySimDefaultTypeInternal _QuerySim_default_instance_;
}  // namespace MA3
PROTOBUF_NAMESPACE_OPEN
template<> ::MA3::QuerySim* Arena::CreateMaybeMessage<::MA3::QuerySim>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MA3 {

// ===================================================================

class QuerySim PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MA3.QuerySim) */ {
 public:
  inline QuerySim() : QuerySim(nullptr) {}
  virtual ~QuerySim();

  QuerySim(const QuerySim& from);
  QuerySim(QuerySim&& from) noexcept
    : QuerySim() {
    *this = ::std::move(from);
  }

  inline QuerySim& operator=(const QuerySim& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySim& operator=(QuerySim&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuerySim& default_instance();

  static inline const QuerySim* internal_default_instance() {
    return reinterpret_cast<const QuerySim*>(
               &_QuerySim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuerySim& a, QuerySim& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySim* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySim* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuerySim* New() const final {
    return CreateMaybeMessage<QuerySim>(nullptr);
  }

  QuerySim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuerySim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuerySim& from);
  void MergeFrom(const QuerySim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MA3.QuerySim";
  }
  protected:
  explicit QuerySim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_querysim_5fmsg_2eproto);
    return ::descriptor_table_querysim_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMdxFieldNumber = 1,
    kMdyFieldNumber = 2,
    kStartXFieldNumber = 3,
    kStartYFieldNumber = 4,
    kStartThetaFieldNumber = 5,
    kVertexIdFieldNumber = 6,
    kMprimIdFieldNumber = 7,
  };
  // float mdx = 1;
  void clear_mdx();
  float mdx() const;
  void set_mdx(float value);
  private:
  float _internal_mdx() const;
  void _internal_set_mdx(float value);
  public:

  // float mdy = 2;
  void clear_mdy();
  float mdy() const;
  void set_mdy(float value);
  private:
  float _internal_mdy() const;
  void _internal_set_mdy(float value);
  public:

  // float start_x = 3;
  void clear_start_x();
  float start_x() const;
  void set_start_x(float value);
  private:
  float _internal_start_x() const;
  void _internal_set_start_x(float value);
  public:

  // float start_y = 4;
  void clear_start_y();
  float start_y() const;
  void set_start_y(float value);
  private:
  float _internal_start_y() const;
  void _internal_set_start_y(float value);
  public:

  // float start_theta = 5;
  void clear_start_theta();
  float start_theta() const;
  void set_start_theta(float value);
  private:
  float _internal_start_theta() const;
  void _internal_set_start_theta(float value);
  public:

  // uint32 vertex_id = 6;
  void clear_vertex_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertex_id() const;
  void set_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertex_id() const;
  void _internal_set_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mprim_id = 7;
  void clear_mprim_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 mprim_id() const;
  void set_mprim_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mprim_id() const;
  void _internal_set_mprim_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MA3.QuerySim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float mdx_;
  float mdy_;
  float start_x_;
  float start_y_;
  float start_theta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertex_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mprim_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_querysim_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuerySim

// float mdx = 1;
inline void QuerySim::clear_mdx() {
  mdx_ = 0;
}
inline float QuerySim::_internal_mdx() const {
  return mdx_;
}
inline float QuerySim::mdx() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.mdx)
  return _internal_mdx();
}
inline void QuerySim::_internal_set_mdx(float value) {
  
  mdx_ = value;
}
inline void QuerySim::set_mdx(float value) {
  _internal_set_mdx(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.mdx)
}

// float mdy = 2;
inline void QuerySim::clear_mdy() {
  mdy_ = 0;
}
inline float QuerySim::_internal_mdy() const {
  return mdy_;
}
inline float QuerySim::mdy() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.mdy)
  return _internal_mdy();
}
inline void QuerySim::_internal_set_mdy(float value) {
  
  mdy_ = value;
}
inline void QuerySim::set_mdy(float value) {
  _internal_set_mdy(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.mdy)
}

// float start_x = 3;
inline void QuerySim::clear_start_x() {
  start_x_ = 0;
}
inline float QuerySim::_internal_start_x() const {
  return start_x_;
}
inline float QuerySim::start_x() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.start_x)
  return _internal_start_x();
}
inline void QuerySim::_internal_set_start_x(float value) {
  
  start_x_ = value;
}
inline void QuerySim::set_start_x(float value) {
  _internal_set_start_x(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.start_x)
}

// float start_y = 4;
inline void QuerySim::clear_start_y() {
  start_y_ = 0;
}
inline float QuerySim::_internal_start_y() const {
  return start_y_;
}
inline float QuerySim::start_y() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.start_y)
  return _internal_start_y();
}
inline void QuerySim::_internal_set_start_y(float value) {
  
  start_y_ = value;
}
inline void QuerySim::set_start_y(float value) {
  _internal_set_start_y(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.start_y)
}

// float start_theta = 5;
inline void QuerySim::clear_start_theta() {
  start_theta_ = 0;
}
inline float QuerySim::_internal_start_theta() const {
  return start_theta_;
}
inline float QuerySim::start_theta() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.start_theta)
  return _internal_start_theta();
}
inline void QuerySim::_internal_set_start_theta(float value) {
  
  start_theta_ = value;
}
inline void QuerySim::set_start_theta(float value) {
  _internal_set_start_theta(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.start_theta)
}

// uint32 vertex_id = 6;
inline void QuerySim::clear_vertex_id() {
  vertex_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySim::_internal_vertex_id() const {
  return vertex_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySim::vertex_id() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.vertex_id)
  return _internal_vertex_id();
}
inline void QuerySim::_internal_set_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vertex_id_ = value;
}
inline void QuerySim::set_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.vertex_id)
}

// uint32 mprim_id = 7;
inline void QuerySim::clear_mprim_id() {
  mprim_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySim::_internal_mprim_id() const {
  return mprim_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuerySim::mprim_id() const {
  // @@protoc_insertion_point(field_get:MA3.QuerySim.mprim_id)
  return _internal_mprim_id();
}
inline void QuerySim::_internal_set_mprim_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mprim_id_ = value;
}
inline void QuerySim::set_mprim_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mprim_id(value);
  // @@protoc_insertion_point(field_set:MA3.QuerySim.mprim_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace MA3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_querysim_5fmsg_2eproto
